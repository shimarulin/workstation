#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_BOOLEAN([development],[d],[Install development requirements])
# ARG_POSITIONAL_SINGLE([destination],[Project path, '~/.config/workstation' by default or './workstation' for --development option],[""])
# ARG_HELP([Get the workstation Ansible configuration, install the configuration dependencies and configuration setup])
# DEFINE_SCRIPT_DIR_GNU()
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_destination=""
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_development="off"


print_help()
{
	printf '%s\n' "Get the workstation Ansible configuration, install the configuration dependencies and configuration setup"
	printf 'Usage: %s [-d|--(no-)development] [-h|--help] [<destination>]\n' "$0"
	printf '\t%s\n' "<destination>: Project path, '~/.config/workstation' by default or './workstation' for --development option (default: '""')"
	printf '\t%s\n' "-d, --development, --no-development: Install development requirements (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--no-development|--development)
				_arg_development="on"
				test "${1:0:5}" = "--no-" && _arg_development="off"
				;;
			-d*)
				_arg_development="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_destination "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


SCRIPT_DIR_NAME="${script_dir%"${script_dir##*[!/]}"}" # extglob-free multi-trailing-/ trim
SCRIPT_DIR_NAME="${SCRIPT_DIR_NAME##*/}"               # remove everything before the last /
SCRIPT_DIR_NAME=${SCRIPT_DIR_NAME:-/}                  # correct for dirname=/ case

if [ -z "$_arg_destination" ]
then
  if [ "$_arg_development" = on ]
  then
    TARGET_PATH=./workstation
  else
    TARGET_PATH=~/.config/workstation
  fi
else
  TARGET_PATH="$_arg_destination"
fi

if [ "$SCRIPT_DIR_NAME" = bin ]
then
  TARGET_PATH=$(readlink -f "$script_dir/../../")
fi

TARGET_DIR=$(dirname "$TARGET_PATH")

upgrade_system () {
  sudo pacman -Syu
}

install_system_requirements () {
  sudo pacman -S git python python-pipx --needed
}

install_development_system_requirements () {
  sudo pacman -S shfmt python-poetry --needed
}

install_common_python_modules () {
  pipx install --include-deps ansible
  pipx inject ansible psutil

  # Install Copier template render (https://github.com/copier-org/copier)
  pipx install copier
  pipx inject copier jinja2_getenv_extension
}

install_development_python_modules () {
  pipx install poethepoet
  pipx inject --include-apps ansible ansible-lint
  # DOWN: pipx runpip ansible uninstall ansible-lint

  pipx install mdformat
  pipx inject mdformat mdformat-shfmt
  # DOWN: pipx runpip mdformat uninstall mdformat-shfmt
}

export_path () {
  export PATH=$HOME/.local/bin:${PATH}
}

ensure_target_dir () {
  mkdir -p "$TARGET_DIR"
}

clone_configuration () {
  git clone https://github.com/shimarulin/workstation.git "$TARGET_PATH"
}

enable_git_hooks () {
  cd "$TARGET_PATH" || return
  git config core.hooksPath ".hooks"
  cd - || return
}

install_ansible_galaxy_roles () {
  ansible-galaxy install -r "$TARGET_PATH/requirements.yml"
}

setup_ansible_vars () {
  source "$TARGET_PATH/tools/bin/setvars"
}

# Installation flow
upgrade_system
install_system_requirements
install_common_python_modules

if [ "$_arg_development" = on ]
then
  install_development_system_requirements
  install_development_python_modules
fi

export_path

if [ "$SCRIPT_DIR_NAME" != bin ]
then
  ensure_target_dir
  clone_configuration
fi

if [ "$_arg_development" = on ]
then
  enable_git_hooks
fi

install_ansible_galaxy_roles
setup_ansible_vars

# ] <-- needed because of Argbash
