#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([group],[g],[Group of vars. One of 'all' or 'dev'],[all])
# ARG_HELP([Setup Ansible variables])
# DEFINE_SCRIPT_DIR_GNU()
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='gh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_group="all"


print_help()
{
	printf '%s\n' "Setup Ansible variables"
	printf 'Usage: %s [-g|--group <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-g, --group: Group of vars. One of 'all' or 'dev' (default: 'all')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-g|--group)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_group="$2"
				shift
				;;
			--group=*)
				_arg_group="${_key##--group=}"
				;;
			-g*)
				_arg_group="${_key##-g}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


TARGET_DIR=$(readlink -f "$script_dir/../..")

if [ "$_arg_group" = 'all' ]; then
  TEMPLATE_DIR=$(readlink -f "$script_dir/../templates/template_ansible_vars_all")
  IP_COUNTRY_CODE=$(curl https://ipapi.co/country/)

  env COUNTRY_CODE="$IP_COUNTRY_CODE" copier copy --UNSAFE "$TEMPLATE_DIR" "$TARGET_DIR"
elif [ "$_arg_group" = 'dev' ]; then
  TEMPLATE_DIR=$(readlink -f "$script_dir/../templates/template_ansible_vars_dev")
  GIT_USER_NAME=$(git config user.name)
  GIT_USER_EMAIL=$(git config user.email)

  env GIT_USER_NAME="$GIT_USER_NAME" GIT_USER_EMAIL="$GIT_USER_EMAIL" copier copy --UNSAFE "$TEMPLATE_DIR" "$TARGET_DIR"
fi

# ] <-- needed because of Argbash
